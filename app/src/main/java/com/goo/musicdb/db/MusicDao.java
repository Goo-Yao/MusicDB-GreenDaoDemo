package com.goo.musicdb.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MusicId = new Property(0, Long.class, "musicId", true, "_id");
        public final static Property SingerId = new Property(1, Long.class, "singerId", false, "SINGER_ID");
        public final static Property SpecialId = new Property(2, Long.class, "specialId", false, "SPECIAL_ID");
        public final static Property MusicName = new Property(3, String.class, "musicName", false, "MUSIC_NAME");
        public final static Property Lyric = new Property(4, String.class, "lyric", false, "LYRIC");
        public final static Property IssueTime = new Property(5, java.util.Date.class, "issueTime", false, "ISSUE_TIME");
    }

    private DaoSession daoSession;

    private Query<Music> singer_MusicsQuery;
    private Query<Music> special_InnerMusicsQuery;
    private Query<Music> user_LikedMusicsQuery;

    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: musicId
                "\"SINGER_ID\" INTEGER," + // 1: singerId
                "\"SPECIAL_ID\" INTEGER," + // 2: specialId
                "\"MUSIC_NAME\" TEXT," + // 3: musicName
                "\"LYRIC\" TEXT," + // 4: lyric
                "\"ISSUE_TIME\" INTEGER);"); // 5: issueTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(1, musicId);
        }
 
        Long singerId = entity.getSingerId();
        if (singerId != null) {
            stmt.bindLong(2, singerId);
        }
 
        Long specialId = entity.getSpecialId();
        if (specialId != null) {
            stmt.bindLong(3, specialId);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(4, musicName);
        }
 
        String lyric = entity.getLyric();
        if (lyric != null) {
            stmt.bindString(5, lyric);
        }
 
        java.util.Date issueTime = entity.getIssueTime();
        if (issueTime != null) {
            stmt.bindLong(6, issueTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(1, musicId);
        }
 
        Long singerId = entity.getSingerId();
        if (singerId != null) {
            stmt.bindLong(2, singerId);
        }
 
        Long specialId = entity.getSpecialId();
        if (specialId != null) {
            stmt.bindLong(3, specialId);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(4, musicName);
        }
 
        String lyric = entity.getLyric();
        if (lyric != null) {
            stmt.bindString(5, lyric);
        }
 
        java.util.Date issueTime = entity.getIssueTime();
        if (issueTime != null) {
            stmt.bindLong(6, issueTime.getTime());
        }
    }

    @Override
    protected final void attachEntity(Music entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // musicId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // singerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // specialId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // musicName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lyric
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // issueTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setMusicId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSingerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSpecialId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMusicName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLyric(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIssueTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setMusicId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getMusicId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getMusicId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "musics" to-many relationship of Singer. */
    public List<Music> _querySinger_Musics(Long singerId) {
        synchronized (this) {
            if (singer_MusicsQuery == null) {
                QueryBuilder<Music> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SingerId.eq(null));
                singer_MusicsQuery = queryBuilder.build();
            }
        }
        Query<Music> query = singer_MusicsQuery.forCurrentThread();
        query.setParameter(0, singerId);
        return query.list();
    }

    /** Internal query to resolve the "innerMusics" to-many relationship of Special. */
    public List<Music> _querySpecial_InnerMusics(Long specialId) {
        synchronized (this) {
            if (special_InnerMusicsQuery == null) {
                QueryBuilder<Music> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SpecialId.eq(null));
                special_InnerMusicsQuery = queryBuilder.build();
            }
        }
        Query<Music> query = special_InnerMusicsQuery.forCurrentThread();
        query.setParameter(0, specialId);
        return query.list();
    }

    /** Internal query to resolve the "likedMusics" to-many relationship of User. */
    public List<Music> _queryUser_LikedMusics(Long userId) {
        synchronized (this) {
            if (user_LikedMusicsQuery == null) {
                QueryBuilder<Music> queryBuilder = queryBuilder();
                queryBuilder.join(LikeMusic.class, LikeMusicDao.Properties.MusicId)
                    .where(LikeMusicDao.Properties.UserId.eq(userId));
                user_LikedMusicsQuery = queryBuilder.build();
            }
        }
        Query<Music> query = user_LikedMusicsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
