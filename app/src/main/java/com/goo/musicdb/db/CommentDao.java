package com.goo.musicdb.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT".
*/
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommentId = new Property(0, Long.class, "commentId", true, "_id");
        public final static Property PostTime = new Property(1, java.util.Date.class, "postTime", false, "POST_TIME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property MusicId = new Property(4, Long.class, "musicId", false, "MUSIC_ID");
    }

    private Query<Comment> music_CommentsQuery;
    private Query<Comment> user_CommentsQuery;

    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: commentId
                "\"POST_TIME\" INTEGER," + // 1: postTime
                "\"CONTENT\" TEXT," + // 2: content
                "\"USER_ID\" INTEGER," + // 3: userId
                "\"MUSIC_ID\" INTEGER);"); // 4: musicId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long commentId = entity.getCommentId();
        if (commentId != null) {
            stmt.bindLong(1, commentId);
        }
 
        java.util.Date postTime = entity.getPostTime();
        if (postTime != null) {
            stmt.bindLong(2, postTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(5, musicId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long commentId = entity.getCommentId();
        if (commentId != null) {
            stmt.bindLong(1, commentId);
        }
 
        java.util.Date postTime = entity.getPostTime();
        if (postTime != null) {
            stmt.bindLong(2, postTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(5, musicId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // commentId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // postTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // musicId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setCommentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPostTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMusicId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setCommentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Comment entity) {
        if(entity != null) {
            return entity.getCommentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Comment entity) {
        return entity.getCommentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "comments" to-many relationship of Music. */
    public List<Comment> _queryMusic_Comments(Long musicId) {
        synchronized (this) {
            if (music_CommentsQuery == null) {
                QueryBuilder<Comment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MusicId.eq(null));
                music_CommentsQuery = queryBuilder.build();
            }
        }
        Query<Comment> query = music_CommentsQuery.forCurrentThread();
        query.setParameter(0, musicId);
        return query.list();
    }

    /** Internal query to resolve the "comments" to-many relationship of User. */
    public List<Comment> _queryUser_Comments(Long userId) {
        synchronized (this) {
            if (user_CommentsQuery == null) {
                QueryBuilder<Comment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_CommentsQuery = queryBuilder.build();
            }
        }
        Query<Comment> query = user_CommentsQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
